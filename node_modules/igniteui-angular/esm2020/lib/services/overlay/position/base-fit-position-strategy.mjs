import { Util } from '../utilities';
import { ConnectedPositioningStrategy } from './connected-positioning-strategy';
export class BaseFitPositionStrategy extends ConnectedPositioningStrategy {
    /** @inheritdoc */
    position(contentElement, size, document, initialCall, target) {
        const targetElement = target || this.settings.target;
        const rects = super.calculateElementRectangles(contentElement, targetElement);
        const connectedFit = {};
        if (initialCall) {
            connectedFit.targetRect = rects.targetRect;
            connectedFit.contentElementRect = rects.elementRect;
            this._initialSettings = this._initialSettings || Object.assign({}, this.settings);
            this.settings = Object.assign({}, this._initialSettings);
            connectedFit.viewPortRect = Util.getViewportRect(document);
            this.updateViewPortFit(connectedFit);
            if (this.shouldFitInViewPort(connectedFit)) {
                this.fitInViewport(contentElement, connectedFit);
            }
        }
        this.setStyle(contentElement, rects.targetRect, rects.elementRect, connectedFit);
    }
    /**
     * Checks if element can fit in viewport and updates provided connectedFit
     * with the result
     *
     * @param connectedFit connectedFit to update
     */
    updateViewPortFit(connectedFit) {
        connectedFit.left = this.calculateLeft(connectedFit.targetRect, connectedFit.contentElementRect, this.settings.horizontalStartPoint, this.settings.horizontalDirection, connectedFit.horizontalOffset ? connectedFit.horizontalOffset : 0);
        connectedFit.right = connectedFit.left + connectedFit.contentElementRect.width;
        connectedFit.fitHorizontal = {
            back: Math.round(connectedFit.left),
            forward: Math.round(connectedFit.viewPortRect.width - connectedFit.right)
        };
        connectedFit.top = this.calculateTop(connectedFit.targetRect, connectedFit.contentElementRect, this.settings.verticalStartPoint, this.settings.verticalDirection, connectedFit.verticalOffset ? connectedFit.verticalOffset : 0);
        connectedFit.bottom = connectedFit.top + connectedFit.contentElementRect.height;
        connectedFit.fitVertical = {
            back: Math.round(connectedFit.top),
            forward: Math.round(connectedFit.viewPortRect.height - connectedFit.bottom)
        };
    }
    /**
     * Calculates the position of the left border of the element if it gets positioned
     * with provided start point and direction
     *
     * @param targetRect Rectangle of the target where element is attached
     * @param elementRect Rectangle of the element
     * @param startPoint Start point of the target
     * @param direction Direction in which to show the element
     */
    calculateLeft(targetRect, elementRect, startPoint, direction, offset) {
        return targetRect.right + targetRect.width * startPoint + elementRect.width * direction + offset;
    }
    /**
     * Calculates the position of the top border of the element if it gets positioned
     * with provided position settings related to the target
     *
     * @param targetRect Rectangle of the target where element is attached
     * @param elementRect Rectangle of the element
     * @param startPoint Start point of the target
     * @param direction Direction in which to show the element
     */
    calculateTop(targetRect, elementRect, startPoint, direction, offset) {
        return targetRect.bottom + targetRect.height * startPoint + elementRect.height * direction + offset;
    }
    /**
     * Returns whether the element should fit in viewport
     *
     * @param connectedFit connectedFit object containing all necessary parameters
     */
    shouldFitInViewPort(connectedFit) {
        return connectedFit.fitHorizontal.back < 0 || connectedFit.fitHorizontal.forward < 0 ||
            connectedFit.fitVertical.back < 0 || connectedFit.fitVertical.forward < 0;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1maXQtcG9zaXRpb24tc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvb3ZlcmxheS9wb3NpdGlvbi9iYXNlLWZpdC1wb3NpdGlvbi1zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQW9FLElBQUksRUFBcUIsTUFBTSxjQUFjLENBQUM7QUFDekgsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFFaEYsTUFBTSxPQUFnQix1QkFBd0IsU0FBUSw0QkFBNEI7SUFJOUUsa0JBQWtCO0lBQ1gsUUFBUSxDQUNYLGNBQTJCLEVBQUUsSUFBVSxFQUFFLFFBQW1CLEVBQUUsV0FBcUIsRUFBRSxNQUE0QjtRQUNqSCxNQUFNLGFBQWEsR0FBRyxNQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7UUFDckQsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLDBCQUEwQixDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUM5RSxNQUFNLFlBQVksR0FBaUIsRUFBRSxDQUFDO1FBQ3RDLElBQUksV0FBVyxFQUFFO1lBQ2IsWUFBWSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1lBQzNDLFlBQVksQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO1lBQ3BELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2xGLElBQUksQ0FBQyxRQUFRLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDekQsWUFBWSxDQUFDLFlBQVks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QUFJLFlBQVksQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLENBQUM7WUFDaEYsWUFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLFlBQVksQ0FBQyxXQUFXLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQztJQUNsRixDQUFDO0NBV0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25uZWN0ZWRGaXQsIEhvcml6b250YWxBbGlnbm1lbnQsIFBvaW50LCBQb3NpdGlvblNldHRpbmdzLCBTaXplLCBVdGlsLCBWZXJ0aWNhbEFsaWdubWVudCB9IGZyb20gJy4uL3V0aWxpdGllcyc7XG5pbXBvcnQgeyBDb25uZWN0ZWRQb3NpdGlvbmluZ1N0cmF0ZWd5IH0gZnJvbSAnLi9jb25uZWN0ZWQtcG9zaXRpb25pbmctc3RyYXRlZ3knO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUZpdFBvc2l0aW9uU3RyYXRlZ3kgZXh0ZW5kcyBDb25uZWN0ZWRQb3NpdGlvbmluZ1N0cmF0ZWd5IHtcbiAgICBwcm90ZWN0ZWQgX2luaXRpYWxTaXplOiBTaXplO1xuICAgIHByb3RlY3RlZCBfaW5pdGlhbFNldHRpbmdzOiBQb3NpdGlvblNldHRpbmdzO1xuXG4gICAgLyoqIEBpbmhlcml0ZG9jICovXG4gICAgcHVibGljIHBvc2l0aW9uKFxuICAgICAgICBjb250ZW50RWxlbWVudDogSFRNTEVsZW1lbnQsIHNpemU6IFNpemUsIGRvY3VtZW50PzogRG9jdW1lbnQsIGluaXRpYWxDYWxsPzogYm9vbGVhbiwgdGFyZ2V0PzogUG9pbnQgfCBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0YXJnZXRFbGVtZW50ID0gdGFyZ2V0IHx8IHRoaXMuc2V0dGluZ3MudGFyZ2V0O1xuICAgICAgICBjb25zdCByZWN0cyA9IHN1cGVyLmNhbGN1bGF0ZUVsZW1lbnRSZWN0YW5nbGVzKGNvbnRlbnRFbGVtZW50LCB0YXJnZXRFbGVtZW50KTtcbiAgICAgICAgY29uc3QgY29ubmVjdGVkRml0OiBDb25uZWN0ZWRGaXQgPSB7fTtcbiAgICAgICAgaWYgKGluaXRpYWxDYWxsKSB7XG4gICAgICAgICAgICBjb25uZWN0ZWRGaXQudGFyZ2V0UmVjdCA9IHJlY3RzLnRhcmdldFJlY3Q7XG4gICAgICAgICAgICBjb25uZWN0ZWRGaXQuY29udGVudEVsZW1lbnRSZWN0ID0gcmVjdHMuZWxlbWVudFJlY3Q7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsU2V0dGluZ3MgPSB0aGlzLl9pbml0aWFsU2V0dGluZ3MgfHwgT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5zZXR0aW5ncyk7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5faW5pdGlhbFNldHRpbmdzKTtcbiAgICAgICAgICAgIGNvbm5lY3RlZEZpdC52aWV3UG9ydFJlY3QgPSBVdGlsLmdldFZpZXdwb3J0UmVjdChkb2N1bWVudCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZpZXdQb3J0Rml0KGNvbm5lY3RlZEZpdCk7XG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGRGaXRJblZpZXdQb3J0KGNvbm5lY3RlZEZpdCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpdEluVmlld3BvcnQoY29udGVudEVsZW1lbnQsIGNvbm5lY3RlZEZpdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRTdHlsZShjb250ZW50RWxlbWVudCwgcmVjdHMudGFyZ2V0UmVjdCwgcmVjdHMuZWxlbWVudFJlY3QsIGNvbm5lY3RlZEZpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGVsZW1lbnQgY2FuIGZpdCBpbiB2aWV3cG9ydCBhbmQgdXBkYXRlcyBwcm92aWRlZCBjb25uZWN0ZWRGaXRcbiAgICAgKiB3aXRoIHRoZSByZXN1bHRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25uZWN0ZWRGaXQgY29ubmVjdGVkRml0IHRvIHVwZGF0ZVxuICAgICAqL1xuICAgIHByb3RlY3RlZCB1cGRhdGVWaWV3UG9ydEZpdChjb25uZWN0ZWRGaXQ6IENvbm5lY3RlZEZpdCkge1xuICAgICAgICBjb25uZWN0ZWRGaXQubGVmdCA9IHRoaXMuY2FsY3VsYXRlTGVmdChcbiAgICAgICAgICAgIGNvbm5lY3RlZEZpdC50YXJnZXRSZWN0LFxuICAgICAgICAgICAgY29ubmVjdGVkRml0LmNvbnRlbnRFbGVtZW50UmVjdCxcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MuaG9yaXpvbnRhbFN0YXJ0UG9pbnQsXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLmhvcml6b250YWxEaXJlY3Rpb24sXG4gICAgICAgICAgICBjb25uZWN0ZWRGaXQuaG9yaXpvbnRhbE9mZnNldCA/IGNvbm5lY3RlZEZpdC5ob3Jpem9udGFsT2Zmc2V0IDogMCk7XG4gICAgICAgIGNvbm5lY3RlZEZpdC5yaWdodCA9IGNvbm5lY3RlZEZpdC5sZWZ0ICsgY29ubmVjdGVkRml0LmNvbnRlbnRFbGVtZW50UmVjdC53aWR0aDtcbiAgICAgICAgY29ubmVjdGVkRml0LmZpdEhvcml6b250YWwgPSB7XG4gICAgICAgICAgICBiYWNrOiBNYXRoLnJvdW5kKGNvbm5lY3RlZEZpdC5sZWZ0KSxcbiAgICAgICAgICAgIGZvcndhcmQ6IE1hdGgucm91bmQoY29ubmVjdGVkRml0LnZpZXdQb3J0UmVjdC53aWR0aCAtIGNvbm5lY3RlZEZpdC5yaWdodClcbiAgICAgICAgfTtcblxuICAgICAgICBjb25uZWN0ZWRGaXQudG9wID0gdGhpcy5jYWxjdWxhdGVUb3AoXG4gICAgICAgICAgICBjb25uZWN0ZWRGaXQudGFyZ2V0UmVjdCxcbiAgICAgICAgICAgIGNvbm5lY3RlZEZpdC5jb250ZW50RWxlbWVudFJlY3QsXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzLnZlcnRpY2FsU3RhcnRQb2ludCxcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudmVydGljYWxEaXJlY3Rpb24sXG4gICAgICAgICAgICBjb25uZWN0ZWRGaXQudmVydGljYWxPZmZzZXQgPyBjb25uZWN0ZWRGaXQudmVydGljYWxPZmZzZXQgOiAwKTtcbiAgICAgICAgY29ubmVjdGVkRml0LmJvdHRvbSA9IGNvbm5lY3RlZEZpdC50b3AgKyBjb25uZWN0ZWRGaXQuY29udGVudEVsZW1lbnRSZWN0LmhlaWdodDtcbiAgICAgICAgY29ubmVjdGVkRml0LmZpdFZlcnRpY2FsID0ge1xuICAgICAgICAgICAgYmFjazogTWF0aC5yb3VuZChjb25uZWN0ZWRGaXQudG9wKSxcbiAgICAgICAgICAgIGZvcndhcmQ6IE1hdGgucm91bmQoY29ubmVjdGVkRml0LnZpZXdQb3J0UmVjdC5oZWlnaHQgLSBjb25uZWN0ZWRGaXQuYm90dG9tKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSBsZWZ0IGJvcmRlciBvZiB0aGUgZWxlbWVudCBpZiBpdCBnZXRzIHBvc2l0aW9uZWRcbiAgICAgKiB3aXRoIHByb3ZpZGVkIHN0YXJ0IHBvaW50IGFuZCBkaXJlY3Rpb25cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0YXJnZXRSZWN0IFJlY3RhbmdsZSBvZiB0aGUgdGFyZ2V0IHdoZXJlIGVsZW1lbnQgaXMgYXR0YWNoZWRcbiAgICAgKiBAcGFyYW0gZWxlbWVudFJlY3QgUmVjdGFuZ2xlIG9mIHRoZSBlbGVtZW50XG4gICAgICogQHBhcmFtIHN0YXJ0UG9pbnQgU3RhcnQgcG9pbnQgb2YgdGhlIHRhcmdldFxuICAgICAqIEBwYXJhbSBkaXJlY3Rpb24gRGlyZWN0aW9uIGluIHdoaWNoIHRvIHNob3cgdGhlIGVsZW1lbnRcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgY2FsY3VsYXRlTGVmdChcbiAgICAgICAgdGFyZ2V0UmVjdDogUGFydGlhbDxET01SZWN0PixcbiAgICAgICAgZWxlbWVudFJlY3Q6IFBhcnRpYWw8RE9NUmVjdD4sXG4gICAgICAgIHN0YXJ0UG9pbnQ6IEhvcml6b250YWxBbGlnbm1lbnQsXG4gICAgICAgIGRpcmVjdGlvbjogSG9yaXpvbnRhbEFsaWdubWVudCxcbiAgICAgICAgb2Zmc2V0PzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRhcmdldFJlY3QucmlnaHQgKyB0YXJnZXRSZWN0LndpZHRoICogc3RhcnRQb2ludCArIGVsZW1lbnRSZWN0LndpZHRoICogZGlyZWN0aW9uICsgb2Zmc2V0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIHBvc2l0aW9uIG9mIHRoZSB0b3AgYm9yZGVyIG9mIHRoZSBlbGVtZW50IGlmIGl0IGdldHMgcG9zaXRpb25lZFxuICAgICAqIHdpdGggcHJvdmlkZWQgcG9zaXRpb24gc2V0dGluZ3MgcmVsYXRlZCB0byB0aGUgdGFyZ2V0XG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0UmVjdCBSZWN0YW5nbGUgb2YgdGhlIHRhcmdldCB3aGVyZSBlbGVtZW50IGlzIGF0dGFjaGVkXG4gICAgICogQHBhcmFtIGVsZW1lbnRSZWN0IFJlY3RhbmdsZSBvZiB0aGUgZWxlbWVudFxuICAgICAqIEBwYXJhbSBzdGFydFBvaW50IFN0YXJ0IHBvaW50IG9mIHRoZSB0YXJnZXRcbiAgICAgKiBAcGFyYW0gZGlyZWN0aW9uIERpcmVjdGlvbiBpbiB3aGljaCB0byBzaG93IHRoZSBlbGVtZW50XG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNhbGN1bGF0ZVRvcChcbiAgICAgICAgdGFyZ2V0UmVjdDogUGFydGlhbDxET01SZWN0PixcbiAgICAgICAgZWxlbWVudFJlY3Q6IFBhcnRpYWw8RE9NUmVjdD4sXG4gICAgICAgIHN0YXJ0UG9pbnQ6IFZlcnRpY2FsQWxpZ25tZW50LFxuICAgICAgICBkaXJlY3Rpb246IFZlcnRpY2FsQWxpZ25tZW50LFxuICAgICAgICBvZmZzZXQ/OiBudW1iZXIpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGFyZ2V0UmVjdC5ib3R0b20gKyB0YXJnZXRSZWN0LmhlaWdodCAqIHN0YXJ0UG9pbnQgKyBlbGVtZW50UmVjdC5oZWlnaHQgKiBkaXJlY3Rpb24gKyBvZmZzZXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBlbGVtZW50IHNob3VsZCBmaXQgaW4gdmlld3BvcnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25uZWN0ZWRGaXQgY29ubmVjdGVkRml0IG9iamVjdCBjb250YWluaW5nIGFsbCBuZWNlc3NhcnkgcGFyYW1ldGVyc1xuICAgICAqL1xuICAgIHByb3RlY3RlZCBzaG91bGRGaXRJblZpZXdQb3J0KGNvbm5lY3RlZEZpdDogQ29ubmVjdGVkRml0KSB7XG4gICAgICAgIHJldHVybiBjb25uZWN0ZWRGaXQuZml0SG9yaXpvbnRhbC5iYWNrIDwgMCB8fCBjb25uZWN0ZWRGaXQuZml0SG9yaXpvbnRhbC5mb3J3YXJkIDwgMCB8fFxuICAgICAgICAgICAgY29ubmVjdGVkRml0LmZpdFZlcnRpY2FsLmJhY2sgPCAwIHx8IGNvbm5lY3RlZEZpdC5maXRWZXJ0aWNhbC5mb3J3YXJkIDwgMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaXRzIHRoZSBlbGVtZW50IGludG8gdmlld3BvcnQgYWNjb3JkaW5nIHRvIHRoZSBwb3NpdGlvbiBzZXR0aW5nc1xuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnQgZWxlbWVudCB0byBmaXQgaW4gdmlld3BvcnRcbiAgICAgKiBAcGFyYW0gY29ubmVjdGVkRml0IGNvbm5lY3RlZEZpdCBvYmplY3QgY29udGFpbmluZyBhbGwgbmVjZXNzYXJ5IHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBwcm90ZWN0ZWQgYWJzdHJhY3QgZml0SW5WaWV3cG9ydChcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQsXG4gICAgICAgIGNvbm5lY3RlZEZpdDogQ29ubmVjdGVkRml0KTtcbn1cbiJdfQ==
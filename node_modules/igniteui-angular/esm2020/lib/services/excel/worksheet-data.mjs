import { HeaderType, ExportRecordType } from '../exporter-common/base-export-service';
import { ExportUtilities } from '../exporter-common/export-utilities';
import { WorksheetDataDictionary } from './worksheet-data-dictionary';
/** @hidden */
export class WorksheetData {
    constructor(_data, options, sort, columnCount, rootKeys, indexOfLastPinnedColumn, columnWidths, owner, owners) {
        this._data = _data;
        this.options = options;
        this.sort = sort;
        this.columnCount = columnCount;
        this.rootKeys = rootKeys;
        this.indexOfLastPinnedColumn = indexOfLastPinnedColumn;
        this.columnWidths = columnWidths;
        this.owner = owner;
        this.owners = owners;
        this.initializeData();
    }
    get data() {
        return this._data;
    }
    get rowCount() {
        return this._rowCount;
    }
    get isEmpty() {
        return !this.rowCount
            || this.rowCount === this.owner.maxLevel + 1
            || !this.columnCount
            || this.owner.columns.every(c => c.skip);
    }
    get isSpecialData() {
        return this._isSpecialData;
    }
    get dataDictionary() {
        return this._dataDictionary;
    }
    get hasMultiColumnHeader() {
        return this._hasMultiColumnHeader;
    }
    get isHierarchical() {
        return this._isHierarchical;
    }
    initializeData() {
        this._dataDictionary = new WorksheetDataDictionary(this.columnCount, this.options.columnWidth, this.columnWidths);
        this._hasMultiColumnHeader = Array.from(this.owners.values())
            .some(o => o.columns.some(col => !col.skip && col.headerType === HeaderType.MultiColumnHeader));
        this._isHierarchical = this.data[0]?.type === ExportRecordType.HierarchicalGridRecord
            || !(typeof (Array.from(this.owners.keys())[0]) === 'string');
        if (this._isHierarchical || (this._hasMultiColumnHeader && !this.options.ignoreMultiColumnHeaders)) {
            this.options.exportAsTable = false;
        }
        if (!this._data || this._data.length === 0) {
            if (!this._isHierarchical) {
                this._rowCount = this.owner.maxLevel + 1;
            }
            return;
        }
        this._isSpecialData = ExportUtilities.isSpecialData(this._data[0].data);
        this._rowCount = this._data.length + 1;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya3NoZWV0LWRhdGEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvc2VydmljZXMvZXhjZWwvd29ya3NoZWV0LWRhdGEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsRUFBOEIsTUFBTSx3Q0FBd0MsQ0FBQztBQUNsSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFFdEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFdEUsY0FBYztBQUNkLE1BQU0sT0FBTyxhQUFhO0lBT3RCLFlBQW9CLEtBQXNCLEVBQ3ZCLE9BQWdDLEVBQ2hDLElBQVMsRUFDVCxXQUFtQixFQUNuQixRQUFrQixFQUNsQix1QkFBK0IsRUFDL0IsWUFBc0IsRUFDdEIsS0FBa0IsRUFDbEIsTUFBNkI7UUFSNUIsVUFBSyxHQUFMLEtBQUssQ0FBaUI7UUFDdkIsWUFBTyxHQUFQLE9BQU8sQ0FBeUI7UUFDaEMsU0FBSSxHQUFKLElBQUksQ0FBSztRQUNULGdCQUFXLEdBQVgsV0FBVyxDQUFRO1FBQ25CLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsNEJBQXVCLEdBQXZCLHVCQUF1QixDQUFRO1FBQy9CLGlCQUFZLEdBQVosWUFBWSxDQUFVO1FBQ3RCLFVBQUssR0FBTCxLQUFLLENBQWE7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBdUI7UUFDeEMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFXLElBQUk7UUFDWCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBVyxPQUFPO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRO2VBQ2QsSUFBSSxDQUFDLFFBQVEsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxDQUFDO2VBQ3pDLENBQUMsSUFBSSxDQUFDLFdBQVc7ZUFDakIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxJQUFXLGFBQWE7UUFDcEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDO0lBQy9CLENBQUM7SUFFRCxJQUFXLGNBQWM7UUFDckIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFXLG9CQUFvQjtRQUMzQixPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQztJQUN0QyxDQUFDO0lBRUQsSUFBVyxjQUFjO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDO0lBRU8sY0FBYztRQUNsQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksdUJBQXVCLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFbEgsSUFBSSxDQUFDLHFCQUFxQixHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQzthQUN4RCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUM7UUFFcEcsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksS0FBSyxnQkFBZ0IsQ0FBQyxzQkFBc0I7ZUFDOUUsQ0FBQyxDQUFDLE9BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDO1FBRWpFLElBQUksSUFBSSxDQUFDLGVBQWUsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsd0JBQXdCLENBQUMsRUFBRTtZQUNoRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7U0FDdEM7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3ZCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO2FBQzVDO1lBRUQsT0FBTztTQUNWO1FBRUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxlQUFlLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEUsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDM0MsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGVhZGVyVHlwZSwgRXhwb3J0UmVjb3JkVHlwZSwgSUNvbHVtbkxpc3QsIElFeHBvcnRSZWNvcmQgfSBmcm9tICcuLi9leHBvcnRlci1jb21tb24vYmFzZS1leHBvcnQtc2VydmljZSc7XG5pbXBvcnQgeyBFeHBvcnRVdGlsaXRpZXMgfSBmcm9tICcuLi9leHBvcnRlci1jb21tb24vZXhwb3J0LXV0aWxpdGllcyc7XG5pbXBvcnQgeyBJZ3hFeGNlbEV4cG9ydGVyT3B0aW9ucyB9IGZyb20gJy4vZXhjZWwtZXhwb3J0ZXItb3B0aW9ucyc7XG5pbXBvcnQgeyBXb3Jrc2hlZXREYXRhRGljdGlvbmFyeSB9IGZyb20gJy4vd29ya3NoZWV0LWRhdGEtZGljdGlvbmFyeSc7XG5cbi8qKiBAaGlkZGVuICovXG5leHBvcnQgY2xhc3MgV29ya3NoZWV0RGF0YSB7XG4gICAgcHJpdmF0ZSBfcm93Q291bnQ6IG51bWJlcjtcbiAgICBwcml2YXRlIF9kYXRhRGljdGlvbmFyeTogV29ya3NoZWV0RGF0YURpY3Rpb25hcnk7XG4gICAgcHJpdmF0ZSBfaXNTcGVjaWFsRGF0YTogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9oYXNNdWx0aUNvbHVtbkhlYWRlcjogYm9vbGVhbjtcbiAgICBwcml2YXRlIF9pc0hpZXJhcmNoaWNhbDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2RhdGE6IElFeHBvcnRSZWNvcmRbXSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgb3B0aW9uczogSWd4RXhjZWxFeHBvcnRlck9wdGlvbnMsXG4gICAgICAgICAgICAgICAgcHVibGljIHNvcnQ6IGFueSxcbiAgICAgICAgICAgICAgICBwdWJsaWMgY29sdW1uQ291bnQ6IG51bWJlcixcbiAgICAgICAgICAgICAgICBwdWJsaWMgcm9vdEtleXM6IHN0cmluZ1tdLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBpbmRleE9mTGFzdFBpbm5lZENvbHVtbjogbnVtYmVyLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBjb2x1bW5XaWR0aHM6IG51bWJlcltdLFxuICAgICAgICAgICAgICAgIHB1YmxpYyBvd25lcjogSUNvbHVtbkxpc3QsXG4gICAgICAgICAgICAgICAgcHVibGljIG93bmVyczogTWFwPGFueSwgSUNvbHVtbkxpc3Q+KSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxpemVEYXRhKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBkYXRhKCk6IElFeHBvcnRSZWNvcmRbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgcm93Q291bnQoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvd0NvdW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnJvd0NvdW50XG4gICAgICAgICAgICB8fCB0aGlzLnJvd0NvdW50ID09PSB0aGlzLm93bmVyLm1heExldmVsICsgMVxuICAgICAgICAgICAgfHwgIXRoaXMuY29sdW1uQ291bnRcbiAgICAgICAgICAgIHx8IHRoaXMub3duZXIuY29sdW1ucy5ldmVyeShjID0+IGMuc2tpcCk7XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBpc1NwZWNpYWxEYXRhKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNTcGVjaWFsRGF0YTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGRhdGFEaWN0aW9uYXJ5KCk6IFdvcmtzaGVldERhdGFEaWN0aW9uYXJ5IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGFEaWN0aW9uYXJ5O1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaGFzTXVsdGlDb2x1bW5IZWFkZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9oYXNNdWx0aUNvbHVtbkhlYWRlcjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGlzSGllcmFyY2hpY2FsKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNIaWVyYXJjaGljYWw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplRGF0YSgpIHtcbiAgICAgICAgdGhpcy5fZGF0YURpY3Rpb25hcnkgPSBuZXcgV29ya3NoZWV0RGF0YURpY3Rpb25hcnkodGhpcy5jb2x1bW5Db3VudCwgdGhpcy5vcHRpb25zLmNvbHVtbldpZHRoLCB0aGlzLmNvbHVtbldpZHRocyk7XG5cbiAgICAgICAgdGhpcy5faGFzTXVsdGlDb2x1bW5IZWFkZXIgPSBBcnJheS5mcm9tKHRoaXMub3duZXJzLnZhbHVlcygpKVxuICAgICAgICAgICAgLnNvbWUobyA9PiBvLmNvbHVtbnMuc29tZShjb2wgPT4gIWNvbC5za2lwICYmIGNvbC5oZWFkZXJUeXBlID09PSBIZWFkZXJUeXBlLk11bHRpQ29sdW1uSGVhZGVyKSk7XG5cbiAgICAgICAgdGhpcy5faXNIaWVyYXJjaGljYWwgPSB0aGlzLmRhdGFbMF0/LnR5cGUgPT09IEV4cG9ydFJlY29yZFR5cGUuSGllcmFyY2hpY2FsR3JpZFJlY29yZFxuICAgICAgICAgICAgfHwgISh0eXBlb2YoQXJyYXkuZnJvbSh0aGlzLm93bmVycy5rZXlzKCkpWzBdKSA9PT0gJ3N0cmluZycpO1xuXG4gICAgICAgIGlmICh0aGlzLl9pc0hpZXJhcmNoaWNhbCB8fCAodGhpcy5faGFzTXVsdGlDb2x1bW5IZWFkZXIgJiYgIXRoaXMub3B0aW9ucy5pZ25vcmVNdWx0aUNvbHVtbkhlYWRlcnMpKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuZXhwb3J0QXNUYWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9kYXRhIHx8IHRoaXMuX2RhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzSGllcmFyY2hpY2FsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcm93Q291bnQgPSB0aGlzLm93bmVyLm1heExldmVsICsgMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5faXNTcGVjaWFsRGF0YSA9IEV4cG9ydFV0aWxpdGllcy5pc1NwZWNpYWxEYXRhKHRoaXMuX2RhdGFbMF0uZGF0YSk7XG4gICAgICAgIHRoaXMuX3Jvd0NvdW50ID0gdGhpcy5fZGF0YS5sZW5ndGggKyAxO1xuICAgIH1cbn1cbiJdfQ==
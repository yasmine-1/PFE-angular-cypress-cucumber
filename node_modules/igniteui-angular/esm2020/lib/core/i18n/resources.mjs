import { DatePickerResourceStringsEN } from './date-picker-resources';
import { DateRangePickerResourceStringsEN } from './date-range-picker-resources';
import { GridResourceStringsEN } from './grid-resources';
import { TimePickerResourceStringsEN } from './time-picker-resources';
import { PaginatorResourceStringsEN } from './paginator-resources';
import { cloneValue } from '../utils';
import { CarouselResourceStringsEN } from './carousel-resources';
import { ChipResourceStringsEN } from './chip-resources';
import { ListResourceStringsEN } from './list-resources';
import { CalendarResourceStringsEN } from './calendar-resources';
import { InputResourceStringsEN } from './input-resources';
import { TreeResourceStringsEN } from './tree-resources';
import { ActionStripResourceStringsEN } from './action-strip-resources';
/**
 * @hidden
 * IF YOU EDIT THIS OBJECT, DO NOT FORGET TO UPDATE
 * projects/igniteui-angular-i18n as well (create the appropriately named files,
 * containing the new/updated component string keys and EN strings for values + create a separate issue + pending-localization label)
 *
 * TODO Add automation tests:
 * 1) each of the folders/languages under \projects\igniteui-angular-i18n\src\ contain resources.ts file with matching components count.
 *    \projects\igniteui-angular-i18n\src\BG\resources.ts contains IgxResourceStringsBG.count matching this.CurrentResourceStrings.count
 * 2) \igniteui-angular\projects\igniteui-angular\src\public_api.ts --> Check if the new interface is added
 *    to IInputResourceStrings (just a proxy as it is later on imported in the angular-i18n package)
 */
export const CurrentResourceStrings = {
    GridResStrings: cloneValue(GridResourceStringsEN),
    PaginatorResStrings: cloneValue(PaginatorResourceStringsEN),
    TimePickerResStrings: cloneValue(TimePickerResourceStringsEN),
    CalendarResStrings: cloneValue(CalendarResourceStringsEN),
    ChipResStrings: cloneValue(ChipResourceStringsEN),
    DatePickerResourceStrings: cloneValue(DatePickerResourceStringsEN),
    DateRangePickerResStrings: cloneValue(DateRangePickerResourceStringsEN),
    CarouselResStrings: cloneValue(CarouselResourceStringsEN),
    ListResStrings: cloneValue(ListResourceStringsEN),
    InputResStrings: cloneValue(InputResourceStringsEN),
    TreeResStrings: cloneValue(TreeResourceStringsEN),
    ActionStripResourceStrings: cloneValue(ActionStripResourceStringsEN)
};
const updateResourceStrings = (currentStrings, newStrings) => {
    for (const key of Object.keys(newStrings)) {
        if (key in currentStrings) {
            currentStrings[key] = newStrings[key];
        }
    }
};
/**
 * Changes the resource strings for all components in the application
 * ```
 * @param resourceStrings to be applied
 */
export const changei18n = (resourceStrings) => {
    for (const key of Object.keys(CurrentResourceStrings)) {
        updateResourceStrings(CurrentResourceStrings[key], resourceStrings);
    }
};
/**
 * Returns current resource strings for all components
 */
export const getCurrentResourceStrings = () => ({
    ...CurrentResourceStrings.CalendarResStrings,
    ...CurrentResourceStrings.CarouselResStrings,
    ...CurrentResourceStrings.ChipResStrings,
    ...CurrentResourceStrings.DatePickerResourceStrings,
    ...CurrentResourceStrings.DateRangePickerResStrings,
    ...CurrentResourceStrings.GridResStrings,
    ...CurrentResourceStrings.InputResStrings,
    ...CurrentResourceStrings.ListResStrings,
    ...CurrentResourceStrings.PaginatorResStrings,
    ...CurrentResourceStrings.TimePickerResStrings,
    ...CurrentResourceStrings.TreeResStrings,
    ...CurrentResourceStrings.ActionStripResourceStrings
});
//# sourceMappingURL=data:application/json;base64,
import { Component, ViewChild } from '@angular/core';
import { IgxColumnActionsComponent } from '../column-actions/column-actions.component';
import { IgxColumnPinningDirective } from '../column-actions/column-pinning.directive';
import { BaseToolbarColumnActionsDirective } from './grid-toolbar.base';
import * as i0 from "@angular/core";
import * as i1 from "../../icon/icon.component";
import * as i2 from "../column-actions/column-actions.component";
import * as i3 from "@angular/common";
import * as i4 from "../../directives/button/button.directive";
import * as i5 from "../column-actions/column-pinning.directive";
import * as i6 from "../../directives/toggle/toggle.directive";
/**
 * Provides a pre-configured column pinning component for the grid.
 *
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridToolbarComponent
 *
 * @example
 * ```html
 *  <igx-grid-toolbar-pinning></igx-grid-toolbar-pinning>
 * ```
 */
export class IgxGridToolbarPinningComponent extends BaseToolbarColumnActionsDirective {
    set content(content) {
        this.columnActionsUI = content;
    }
}
IgxGridToolbarPinningComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IgxGridToolbarPinningComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
IgxGridToolbarPinningComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.2", type: IgxGridToolbarPinningComponent, selector: "igx-grid-toolbar-pinning", viewQueries: [{ propertyName: "content", first: true, predicate: IgxColumnPinningDirective, descendants: true, read: IgxColumnActionsComponent }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"grid.rendered$ | async\">\n    <button [title]=\"grid?.resourceStrings.igx_grid_toolbar_pinning_button_tooltip\" #btn igxButton=\"outlined\" type=\"button\"\n        name=\"btnColumnPinning\" (click)=\"toggle(btn, ref, actions)\" [displayDensity]=\"grid.displayDensity\">\n        <igx-icon family=\"imx-icons\" [name]=\"!grid.pinnedColumnsCount ? 'unpin-left' : 'pin-left'\"></igx-icon>\n        <span>{{ grid.pinnedColumnsCount }}</span>\n        <span>{{ buttonText }}</span>\n    </button>\n    <igx-column-actions #actions igxColumnPinning igxToggle (opened)=\"focusSearch(ref.element)\" #ref=\"toggle\"\n        [grid]=\"grid\" [title]=\"title || grid?.resourceStrings.igx_grid_toolbar_pinning_title\"\n        [filterColumnsPrompt]=\"prompt || grid?.resourceStrings.igx_grid_toolbar_actions_filter_prompt\"\n        [hideFilter]=\"hideFilter\" [filterCriteria]=\"filterCriteria\" [columnDisplayOrder]=\"columnDisplayOrder\" [columnsAreaMaxHeight]=\"columnsAreaMaxHeight\"\n        [uncheckAllText]=\"uncheckAllText\" [checkAllText]=\"checkAllText\" [indentation]=\"indentetion\">\n    </igx-column-actions>\n</ng-container>\n", components: [{ type: i1.IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { type: i2.IgxColumnActionsComponent, selector: "igx-column-actions", inputs: ["grid", "indentation", "columnsAreaMaxHeight", "hideFilter", "title", "filterColumnsPrompt", "filterCriteria", "columnDisplayOrder", "uncheckAllText", "checkAllText", "id"], outputs: ["columnToggled"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { type: i5.IgxColumnPinningDirective, selector: "[igxColumnPinning]" }, { type: i6.IgxToggleDirective, selector: "[igxToggle]", inputs: ["id"], outputs: ["opened", "opening", "closed", "closing", "appended"], exportAs: ["toggle"] }], pipes: { "async": i3.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IgxGridToolbarPinningComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-grid-toolbar-pinning', template: "<ng-container *ngIf=\"grid.rendered$ | async\">\n    <button [title]=\"grid?.resourceStrings.igx_grid_toolbar_pinning_button_tooltip\" #btn igxButton=\"outlined\" type=\"button\"\n        name=\"btnColumnPinning\" (click)=\"toggle(btn, ref, actions)\" [displayDensity]=\"grid.displayDensity\">\n        <igx-icon family=\"imx-icons\" [name]=\"!grid.pinnedColumnsCount ? 'unpin-left' : 'pin-left'\"></igx-icon>\n        <span>{{ grid.pinnedColumnsCount }}</span>\n        <span>{{ buttonText }}</span>\n    </button>\n    <igx-column-actions #actions igxColumnPinning igxToggle (opened)=\"focusSearch(ref.element)\" #ref=\"toggle\"\n        [grid]=\"grid\" [title]=\"title || grid?.resourceStrings.igx_grid_toolbar_pinning_title\"\n        [filterColumnsPrompt]=\"prompt || grid?.resourceStrings.igx_grid_toolbar_actions_filter_prompt\"\n        [hideFilter]=\"hideFilter\" [filterCriteria]=\"filterCriteria\" [columnDisplayOrder]=\"columnDisplayOrder\" [columnsAreaMaxHeight]=\"columnsAreaMaxHeight\"\n        [uncheckAllText]=\"uncheckAllText\" [checkAllText]=\"checkAllText\" [indentation]=\"indentetion\">\n    </igx-column-actions>\n</ng-container>\n" }]
        }], propDecorators: { content: [{
                type: ViewChild,
                args: [IgxColumnPinningDirective, { read: IgxColumnActionsComponent }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3Rvb2xiYXIvZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3Rvb2xiYXIvZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDdkYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7Ozs7O0FBRXhFOzs7Ozs7Ozs7OztHQVdHO0FBS0gsTUFBTSxPQUFPLDhCQUErQixTQUFRLGlDQUFpQztJQUVqRixJQUNZLE9BQU8sQ0FBQyxPQUFrQztRQUNsRCxJQUFJLENBQUMsZUFBZSxHQUFHLE9BQU8sQ0FBQztJQUNuQyxDQUFDOzsySEFMUSw4QkFBOEI7K0dBQTlCLDhCQUE4Qix5R0FFNUIseUJBQXlCLDJCQUFTLHlCQUF5QixvREN2QjFFLG9vQ0FjQTsyRkRPYSw4QkFBOEI7a0JBSjFDLFNBQVM7K0JBQ0ksMEJBQTBCOzhCQU14QixPQUFPO3NCQURsQixTQUFTO3VCQUFDLHlCQUF5QixFQUFFLEVBQUMsSUFBSSxFQUFFLHlCQUF5QixFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElneENvbHVtbkFjdGlvbnNDb21wb25lbnQgfSBmcm9tICcuLi9jb2x1bW4tYWN0aW9ucy9jb2x1bW4tYWN0aW9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4Q29sdW1uUGlubmluZ0RpcmVjdGl2ZSB9IGZyb20gJy4uL2NvbHVtbi1hY3Rpb25zL2NvbHVtbi1waW5uaW5nLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBCYXNlVG9vbGJhckNvbHVtbkFjdGlvbnNEaXJlY3RpdmUgfSBmcm9tICcuL2dyaWQtdG9vbGJhci5iYXNlJztcblxuLyoqXG4gKiBQcm92aWRlcyBhIHByZS1jb25maWd1cmVkIGNvbHVtbiBwaW5uaW5nIGNvbXBvbmVudCBmb3IgdGhlIGdyaWQuXG4gKlxuICpcbiAqIEBpZ3hNb2R1bGUgSWd4R3JpZFRvb2xiYXJNb2R1bGVcbiAqIEBpZ3hQYXJlbnQgSWd4R3JpZFRvb2xiYXJDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogIDxpZ3gtZ3JpZC10b29sYmFyLXBpbm5pbmc+PC9pZ3gtZ3JpZC10b29sYmFyLXBpbm5pbmc+XG4gKiBgYGBcbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtZ3JpZC10b29sYmFyLXBpbm5pbmcnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9ncmlkLXRvb2xiYXItcGlubmluZy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWd4R3JpZFRvb2xiYXJQaW5uaW5nQ29tcG9uZW50IGV4dGVuZHMgQmFzZVRvb2xiYXJDb2x1bW5BY3Rpb25zRGlyZWN0aXZlIHtcblxuICAgIEBWaWV3Q2hpbGQoSWd4Q29sdW1uUGlubmluZ0RpcmVjdGl2ZSwge3JlYWQ6IElneENvbHVtbkFjdGlvbnNDb21wb25lbnR9KVxuICAgIHByaXZhdGUgc2V0IGNvbnRlbnQoY29udGVudDogSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCkge1xuICAgICAgICB0aGlzLmNvbHVtbkFjdGlvbnNVSSA9IGNvbnRlbnQ7XG4gICAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cImdyaWQucmVuZGVyZWQkIHwgYXN5bmNcIj5cbiAgICA8YnV0dG9uIFt0aXRsZV09XCJncmlkPy5yZXNvdXJjZVN0cmluZ3MuaWd4X2dyaWRfdG9vbGJhcl9waW5uaW5nX2J1dHRvbl90b29sdGlwXCIgI2J0biBpZ3hCdXR0b249XCJvdXRsaW5lZFwiIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBuYW1lPVwiYnRuQ29sdW1uUGlubmluZ1wiIChjbGljayk9XCJ0b2dnbGUoYnRuLCByZWYsIGFjdGlvbnMpXCIgW2Rpc3BsYXlEZW5zaXR5XT1cImdyaWQuZGlzcGxheURlbnNpdHlcIj5cbiAgICAgICAgPGlneC1pY29uIGZhbWlseT1cImlteC1pY29uc1wiIFtuYW1lXT1cIiFncmlkLnBpbm5lZENvbHVtbnNDb3VudCA/ICd1bnBpbi1sZWZ0JyA6ICdwaW4tbGVmdCdcIj48L2lneC1pY29uPlxuICAgICAgICA8c3Bhbj57eyBncmlkLnBpbm5lZENvbHVtbnNDb3VudCB9fTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+e3sgYnV0dG9uVGV4dCB9fTwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbiAgICA8aWd4LWNvbHVtbi1hY3Rpb25zICNhY3Rpb25zIGlneENvbHVtblBpbm5pbmcgaWd4VG9nZ2xlIChvcGVuZWQpPVwiZm9jdXNTZWFyY2gocmVmLmVsZW1lbnQpXCIgI3JlZj1cInRvZ2dsZVwiXG4gICAgICAgIFtncmlkXT1cImdyaWRcIiBbdGl0bGVdPVwidGl0bGUgfHwgZ3JpZD8ucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX3Rvb2xiYXJfcGlubmluZ190aXRsZVwiXG4gICAgICAgIFtmaWx0ZXJDb2x1bW5zUHJvbXB0XT1cInByb21wdCB8fCBncmlkPy5yZXNvdXJjZVN0cmluZ3MuaWd4X2dyaWRfdG9vbGJhcl9hY3Rpb25zX2ZpbHRlcl9wcm9tcHRcIlxuICAgICAgICBbaGlkZUZpbHRlcl09XCJoaWRlRmlsdGVyXCIgW2ZpbHRlckNyaXRlcmlhXT1cImZpbHRlckNyaXRlcmlhXCIgW2NvbHVtbkRpc3BsYXlPcmRlcl09XCJjb2x1bW5EaXNwbGF5T3JkZXJcIiBbY29sdW1uc0FyZWFNYXhIZWlnaHRdPVwiY29sdW1uc0FyZWFNYXhIZWlnaHRcIlxuICAgICAgICBbdW5jaGVja0FsbFRleHRdPVwidW5jaGVja0FsbFRleHRcIiBbY2hlY2tBbGxUZXh0XT1cImNoZWNrQWxsVGV4dFwiIFtpbmRlbnRhdGlvbl09XCJpbmRlbnRldGlvblwiPlxuICAgIDwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuPC9uZy1jb250YWluZXI+XG4iXX0=
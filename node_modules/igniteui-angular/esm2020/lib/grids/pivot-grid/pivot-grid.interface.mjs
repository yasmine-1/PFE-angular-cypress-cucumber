/**
* Default pivot keys used for data processing in the pivot pipes.
*/
export const DEFAULT_PIVOT_KEYS = {
    aggregations: 'aggregations', records: 'records', children: 'children', level: 'level',
    rowDimensionSeparator: '_', columnDimensionSeparator: '-'
};
/** The dimension types - Row, Column or Filter. */
export var PivotDimensionType;
(function (PivotDimensionType) {
    PivotDimensionType[PivotDimensionType["Row"] = 0] = "Row";
    PivotDimensionType[PivotDimensionType["Column"] = 1] = "Column";
    PivotDimensionType[PivotDimensionType["Filter"] = 2] = "Filter";
})(PivotDimensionType || (PivotDimensionType = {}));
//# sourceMappingURL=data:application/json;base64,
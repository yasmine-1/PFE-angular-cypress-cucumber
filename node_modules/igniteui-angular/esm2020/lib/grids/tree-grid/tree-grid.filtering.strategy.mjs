import { parseDate, resolveNestedPath } from '../../core/utils';
import { DataUtil } from '../../data-operations/data-util';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { BaseFilteringStrategy } from '../../data-operations/filtering-strategy';
import { SortingDirection } from '../../data-operations/sorting-strategy';
export class TreeGridFilteringStrategy extends BaseFilteringStrategy {
    constructor(hierarchicalFilterFields) {
        super();
        this.hierarchicalFilterFields = hierarchicalFilterFields;
    }
    filter(data, expressionsTree, advancedExpressionsTree, grid) {
        return this.filterImpl(data, expressionsTree, advancedExpressionsTree, undefined, grid);
    }
    getFieldValue(rec, fieldName, isDate = false, isTime = false, grid) {
        const column = grid?.getColumnByName(fieldName);
        const hierarchicalRecord = rec;
        let value = this.isHierarchicalFilterField(fieldName) ?
            this.getHierarchicalFieldValue(hierarchicalRecord, fieldName) :
            resolveNestedPath(hierarchicalRecord.data, fieldName);
        value = column?.formatter && this.shouldFormatFilterValues(column) ?
            column.formatter(value, rec.data) :
            value && (isDate || isTime) ? parseDate(value) : value;
        return value;
    }
    getHierarchicalFieldValue(record, field) {
        const value = resolveNestedPath(record.data, field);
        return record.parent ?
            `${this.getHierarchicalFieldValue(record.parent, field)}${value ? `.[${value}]` : ''}` :
            `[${value}]`;
    }
    filterImpl(data, expressionsTree, advancedExpressionsTree, parent, grid) {
        let i;
        let rec;
        const len = data.length;
        const res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = DataUtil.cloneTreeGridRecord(data[i]);
            rec.parent = parent;
            if (rec.children) {
                const filteredChildren = this.filterImpl(rec.children, expressionsTree, advancedExpressionsTree, rec, grid);
                rec.children = filteredChildren.length > 0 ? filteredChildren : null;
            }
            if (this.matchRecord(rec, expressionsTree, grid) && this.matchRecord(rec, advancedExpressionsTree, grid)) {
                res.push(rec);
            }
            else if (rec.children && rec.children.length > 0) {
                rec.isFilteredOutParent = true;
                res.push(rec);
            }
        }
        return res;
    }
    isHierarchicalFilterField(field) {
        return this.hierarchicalFilterFields && this.hierarchicalFilterFields.indexOf(field) !== -1;
    }
    getFilterItems(column, tree) {
        if (!this.isHierarchicalFilterField(column.field)) {
            return super.getFilterItems(column, tree);
        }
        let data = column.grid.gridAPI.filterTreeDataByExpressions(tree);
        data = DataUtil.treeGridSort(data, [{ fieldName: column.field, dir: SortingDirection.Asc, ignoreCase: column.sortingIgnoreCase }], column.grid.sortStrategy, null, column.grid);
        const items = this.getHierarchicalFilterItems(data, column);
        return Promise.resolve(items);
    }
    getHierarchicalFilterItems(records, column, parent) {
        return records?.map(record => {
            let value = resolveNestedPath(record.data, column.field);
            const applyFormatter = column.formatter && this.shouldFormatFilterValues(column);
            value = applyFormatter ?
                column.formatter(value, record.data) :
                value;
            const hierarchicalValue = parent ?
                (value || value === 0) ? `${parent.value}.[${value}]` : value :
                `[${value}]`;
            const filterItem = { value: hierarchicalValue };
            filterItem.label = this.getFilterItemLabel(column, value, !applyFormatter, record.data);
            filterItem.children = this.getHierarchicalFilterItems(record.children, column, filterItem);
            return filterItem;
        });
    }
}
export class TreeGridFormattedValuesFilteringStrategy extends TreeGridFilteringStrategy {
    /**
     * Creates a new instance of FormattedValuesFilteringStrategy.
     *
     * @param fields An array of column field names that should be formatted.
     * If omitted the values of all columns which has formatter will be formatted.
     */
    constructor(fields) {
        super();
        this.fields = fields;
    }
    shouldFormatFilterValues(column) {
        return !this.fields || this.fields.length === 0 || this.fields.some(f => f === column.field);
    }
}
export class TreeGridMatchingRecordsOnlyFilteringStrategy extends TreeGridFilteringStrategy {
    filter(data, expressionsTree, advancedExpressionsTree, grid) {
        return this.filterImplementation(data, expressionsTree, advancedExpressionsTree, undefined, grid);
    }
    filterImplementation(data, expressionsTree, advancedExpressionsTree, parent, grid) {
        let i;
        let rec;
        const len = data.length;
        const res = [];
        if ((FilteringExpressionsTree.empty(expressionsTree) && FilteringExpressionsTree.empty(advancedExpressionsTree)) || !len) {
            return data;
        }
        for (i = 0; i < len; i++) {
            rec = DataUtil.cloneTreeGridRecord(data[i]);
            rec.parent = parent;
            if (rec.children) {
                const filteredChildren = this.filterImplementation(rec.children, expressionsTree, advancedExpressionsTree, rec, grid);
                rec.children = filteredChildren.length > 0 ? filteredChildren : null;
            }
            if (this.matchRecord(rec, expressionsTree, grid) && this.matchRecord(rec, advancedExpressionsTree, grid)) {
                res.push(rec);
            }
            else if (rec.children && rec.children.length > 0) {
                rec = this.setCorrectLevelToFilteredRecords(rec);
                res.push(...rec.children);
            }
        }
        return res;
    }
    setCorrectLevelToFilteredRecords(rec) {
        if (rec.children && rec.children.length > 0) {
            rec.children.map(child => {
                child.level = child.level - 1;
                return this.setCorrectLevelToFilteredRecords(child);
            });
        }
        return rec;
    }
}
//# sourceMappingURL=data:application/json;base64,
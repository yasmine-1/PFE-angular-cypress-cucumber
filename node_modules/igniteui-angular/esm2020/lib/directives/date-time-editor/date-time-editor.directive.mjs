/* eslint-disable @angular-eslint/no-conflicting-lifecycle */
import { Directive, Input, NgModule, Output, EventEmitter, Inject, LOCALE_ID, HostListener } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, } from '@angular/forms';
import { DOCUMENT } from '@angular/common';
import { IgxMaskDirective } from '../mask/mask.directive';
import { isDate } from '../../core/utils';
import { DatePart } from './date-time-editor.common';
import { noop } from 'rxjs';
import { DateTimeUtil } from '../../date-common/util/date-time.util';
import * as i0 from "@angular/core";
import * as i1 from "../mask/mask-parsing.service";
import * as i2 from "../../core/utils";
/**
 * Date Time Editor provides a functionality to input, edit and format date and time.
 *
 * @igxModule IgxDateTimeEditorModule
 *
 * @igxParent IgxInputGroup
 *
 * @igxTheme igx-input-theme
 *
 * @igxKeywords date, time, editor
 *
 * @igxGroup Scheduling
 *
 * @remarks
 *
 * The Ignite UI Date Time Editor Directive makes it easy for developers to manipulate date/time user input.
 * It requires input in a specified or default input format which is visible in the input element as a placeholder.
 * It allows the input of only date (ex: 'dd/MM/yyyy'), only time (ex:'HH:mm tt') or both at once, if needed.
 * Supports display format that may differ from the input format.
 * Provides methods to increment and decrement any specific/targeted `DatePart`.
 *
 * @example
 * ```html
 * <igx-input-group>
 *   <input type="text" igxInput [igxDateTimeEditor]="'dd/MM/yyyy'" [displayFormat]="'shortDate'" [(ngModel)]="date"/>
 * </igx-input-group>
 * ```
 */
export class IgxDateTimeEditorDirective extends IgxMaskDirective {
    constructor(renderer, elementRef, maskParser, platform, _document, _locale) {
        super(elementRef, maskParser, renderer, platform);
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.maskParser = maskParser;
        this.platform = platform;
        this._document = _document;
        this._locale = _locale;
        /**
         * Specify if the currently spun date segment should loop over.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor [spinLoop]="false">
         * ```
         */
        this.spinLoop = true;
        /**
         * Emitted when the editor's value has changed.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor (valueChange)="valueChange($event)"/>
         * ```
         */
        this.valueChange = new EventEmitter();
        /**
         * Emitted when the editor is not within a specified range or when the editor's value is in an invalid state.
         *
         * @example
         * ```html
         * <input igxDateTimeEditor [minValue]="minDate" [maxValue]="maxDate" (validationFailed)="onValidationFailed($event)"/>
         * ```
         */
        this.validationFailed = new EventEmitter();
        this._datePartDeltas = {
            date: 1,
            month: 1,
            year: 1,
            hours: 1,
            minutes: 1,
            seconds: 1
        };
        this.onTouchCallback = noop;
        this.onChangeCallback = noop;
        this.onValidatorChange = noop;
        this.document = this._document;
        this.locale = this.locale || this._locale;
    }
    /**
     * Minimum value required for the editor to remain valid.
     *
     * @remarks
     * If a `string` value is passed, it must be in the defined input format.
     *
     * @example
     * ```html
     * <input igxDateTimeEditor [minValue]="minDate">
     * ```
     */
    get minValue() {
        return this._minValue;
    }
    set minValue(value) {
        this._minValue = value;
        this.onValidatorChange();
    }
    /**
     * Maximum value required for the editor to remain valid.
     *
     * @remarks
     * If a `string` value is passed in, it must be in the defined input format.
     *
     * @example
     * ```html
     * <input igxDateTimeEditor [maxValue]="maxDate">
     * ```
     */
    get maxValue() {
        return this._maxValue;
    }
    set maxValue(value) {
        this._maxValue = value;
        this.onValidatorChange();
    }
    /**
     * Expected user input format (and placeholder).
     *
     * @example
     * ```html
     * <input [igxDateTimeEditor]="'dd/MM/yyyy'">
     * ```
     */
    set inputFormat(value) {
        if (value) {
            this.setMask(value);
            this._inputFormat = value;
        }
    }
    get inputFormat() {
        return this._inputFormat || this._defaultInputFormat;
    }
    /**
     * Editor value.
     *
     * @example
     * ```html
     * <input igxDateTimeEditor [value]="date">
     * ```
     */
    set value(value) {
        this._value = value;
        this.setDateValue(value);
        this.onChangeCallback(value);
        this.updateMask();
    }
    get value() {
        return this._value;
    }
    get datePartDeltas() {
        return Object.assign({}, this._datePartDeltas, this.spinDelta);
    }
    get emptyMask() {
        return this.maskParser.applyMask(null, this.maskOptions);
    }
    get targetDatePart() {
        if (this.document.activeElement === this.nativeElement) {
            return this._inputDateParts
                .find(p => p.start <= this.selectionStart && this.selectionStart <= p.end && p.type !== DatePart.Literal)?.type;
        }
        else {
            if (this._inputDateParts.some(p => p.type === DatePart.Date)) {
                return DatePart.Date;
            }
            else if (this._inputDateParts.some(p => p.type === DatePart.Hours)) {
                return DatePart.Hours;
            }
        }
    }
    get hasDateParts() {
        return this._inputDateParts.some(p => p.type === DatePart.Date
            || p.type === DatePart.Month
            || p.type === DatePart.Year);
    }
    get hasTimeParts() {
        return this._inputDateParts.some(p => p.type === DatePart.Hours
            || p.type === DatePart.Minutes
            || p.type === DatePart.Seconds);
    }
    get dateValue() {
        return this._dateValue;
    }
    onWheel(event) {
        if (!this._isFocused) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
        if (event.deltaY > 0) {
            this.decrement();
        }
        else {
            this.increment();
        }
    }
    ngOnInit() {
        this.updateDefaultFormat();
        this.setMask(this.inputFormat);
        this.updateMask();
    }
    /** @hidden @internal */
    ngOnChanges(changes) {
        if (changes['locale'] && !changes['locale'].firstChange) {
            this.updateDefaultFormat();
            if (!this._inputFormat) {
                this.setMask(this.inputFormat);
                this.updateMask();
            }
        }
        if (changes['inputFormat'] && !changes['inputFormat'].firstChange) {
            this.updateMask();
        }
    }
    /** Clear the input element value. */
    clear() {
        this._onClear = true;
        this.updateValue(null);
        this.setSelectionRange(0, this.inputValue.length);
        this._onClear = false;
    }
    /**
     * Increment specified DatePart.
     *
     * @param datePart The optional DatePart to increment. Defaults to Date or Hours (when Date is absent from the inputFormat - ex:'HH:mm').
     * @param delta The optional delta to increment by. Overrides `spinDelta`.
     */
    increment(datePart, delta) {
        const targetPart = datePart || this.targetDatePart;
        if (!targetPart) {
            return;
        }
        const newValue = this.trySpinValue(targetPart, delta);
        this.updateValue(newValue);
    }
    /**
     * Decrement specified DatePart.
     *
     * @param datePart The optional DatePart to decrement. Defaults to Date or Hours (when Date is absent from the inputFormat - ex:'HH:mm').
     * @param delta The optional delta to decrement by. Overrides `spinDelta`.
     */
    decrement(datePart, delta) {
        const targetPart = datePart || this.targetDatePart;
        if (!targetPart) {
            return;
        }
        const newValue = this.trySpinValue(targetPart, delta, true);
        this.updateValue(newValue);
    }
    /** @hidden @internal */
    writeValue(value) {
        this._value = value;
        this.setDateValue(value);
        this.updateMask();
    }
    /** @hidden @internal */
    validate(control) {
        if (!control.value) {
            return null;
        }
        // InvalidDate handling
        if (isDate(control.value) && !DateTimeUtil.isValidDate(control.value)) {
            return { value: true };
        }
        let errors = {};
        const value = DateTimeUtil.isValidDate(control.value) ? control.value : DateTimeUtil.parseIsoDate(control.value);
        const minValueDate = DateTimeUtil.isValidDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);
        const maxValueDate = DateTimeUtil.isValidDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);
        if (minValueDate || maxValueDate) {
            errors = DateTimeUtil.validateMinMax(value, minValueDate, maxValueDate, this.hasTimeParts, this.hasDateParts);
        }
        return Object.keys(errors).length > 0 ? errors : null;
    }
    /** @hidden @internal */
    registerOnValidatorChange(fn) {
        this.onValidatorChange = fn;
    }
    /** @hidden @internal */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /** @hidden @internal */
    registerOnTouched(fn) {
        this.onTouchCallback = fn;
    }
    /** @hidden @internal */
    setDisabledState(_isDisabled) { }
    /** @hidden @internal */
    onCompositionEnd() {
        super.onCompositionEnd();
        this.updateValue(this.parseDate(this.inputValue));
        this.updateMask();
    }
    /** @hidden @internal */
    onInputChanged(event) {
        super.onInputChanged(event);
        if (this._composing) {
            return;
        }
        if (this.inputIsComplete()) {
            const parsedDate = this.parseDate(this.inputValue);
            if (DateTimeUtil.isValidDate(parsedDate)) {
                this.updateValue(parsedDate);
            }
            else {
                const oldValue = this.value && new Date(this.dateValue.getTime());
                const args = { oldValue, newValue: parsedDate, userInput: this.inputValue };
                this.validationFailed.emit(args);
                if (DateTimeUtil.isValidDate(args.newValue)) {
                    this.updateValue(args.newValue);
                }
                else {
                    this.updateValue(null);
                }
            }
        }
        else {
            this.updateValue(null);
        }
    }
    /** @hidden @internal */
    onKeyDown(event) {
        if (this.nativeElement.readOnly) {
            return;
        }
        super.onKeyDown(event);
        const key = event.key;
        if (event.altKey) {
            return;
        }
        if (key === this.platform.KEYMAP.ARROW_DOWN || key === this.platform.KEYMAP.ARROW_UP) {
            this.spin(event);
            return;
        }
        if (event.ctrlKey && key === this.platform.KEYMAP.SEMICOLON) {
            this.updateValue(new Date());
        }
        this.moveCursor(event);
    }
    /** @hidden @internal */
    onFocus() {
        if (this.nativeElement.readOnly) {
            return;
        }
        this._isFocused = true;
        this.onTouchCallback();
        this.updateMask();
        super.onFocus();
    }
    /** @hidden @internal */
    onBlur(value) {
        this._isFocused = false;
        if (!this.inputIsComplete() && this.inputValue !== this.emptyMask) {
            this.updateValue(this.parseDate(this.inputValue));
        }
        else {
            this.updateMask();
        }
        // TODO: think of a better way to set displayValuePipe in mask directive
        if (this.displayValuePipe) {
            return;
        }
        super.onBlur(value);
    }
    // the date editor sets its own inputFormat as its placeholder if none is provided
    /** @hidden */
    setPlaceholder(_value) { }
    updateDefaultFormat() {
        this._defaultInputFormat = DateTimeUtil.getDefaultInputFormat(this.locale);
    }
    updateMask() {
        if (this._isFocused) {
            // store the cursor position as it will be moved during masking
            const cursor = this.selectionEnd;
            this.inputValue = this.getMaskedValue();
            this.setSelectionRange(cursor);
        }
        else {
            if (!this.dateValue || !DateTimeUtil.isValidDate(this.dateValue)) {
                this.inputValue = '';
                return;
            }
            if (this.displayValuePipe) {
                // TODO: remove when formatter func has been deleted
                this.inputValue = this.displayValuePipe.transform(this.value);
                return;
            }
            const format = this.displayFormat || this.inputFormat;
            if (format) {
                this.inputValue = DateTimeUtil.formatDate(this.dateValue, format.replace('tt', 'aa'), this.locale);
            }
            else {
                this.inputValue = this.dateValue.toLocaleString();
            }
        }
    }
    setMask(inputFormat) {
        const oldFormat = this._inputDateParts?.map(p => p.format).join('');
        this._inputDateParts = DateTimeUtil.parseDateTimeFormat(inputFormat);
        inputFormat = this._inputDateParts.map(p => p.format).join('');
        const mask = (inputFormat || DateTimeUtil.DEFAULT_INPUT_FORMAT)
            .replace(new RegExp(/(?=[^t])[\w]/, 'g'), '0');
        this.mask = mask.indexOf('tt') !== -1 ? mask.replace(new RegExp('tt', 'g'), 'LL') : mask;
        const placeholder = this.nativeElement.placeholder;
        if (!placeholder || oldFormat === placeholder) {
            this.renderer.setAttribute(this.nativeElement, 'placeholder', inputFormat);
        }
    }
    parseDate(val) {
        if (!val) {
            return null;
        }
        return DateTimeUtil.parseValueFromMask(val, this._inputDateParts, this.promptChar);
    }
    getMaskedValue() {
        let mask = this.emptyMask;
        if (DateTimeUtil.isValidDate(this.value)) {
            for (const part of this._inputDateParts) {
                if (part.type === DatePart.Literal) {
                    continue;
                }
                const targetValue = this.getPartValue(part, part.format.length);
                mask = this.maskParser.replaceInMask(mask, targetValue, this.maskOptions, part.start, part.end).value;
            }
            return mask;
        }
        if (!this.inputIsComplete() || !this._onClear) {
            return this.inputValue;
        }
        return mask;
    }
    valueInRange(value) {
        if (!value) {
            return false;
        }
        let errors = {};
        const minValueDate = DateTimeUtil.isValidDate(this.minValue) ? this.minValue : this.parseDate(this.minValue);
        const maxValueDate = DateTimeUtil.isValidDate(this.maxValue) ? this.maxValue : this.parseDate(this.maxValue);
        if (minValueDate || maxValueDate) {
            errors = DateTimeUtil.validateMinMax(value, this.minValue, this.maxValue, this.hasTimeParts, this.hasDateParts);
        }
        return Object.keys(errors).length === 0;
    }
    spinValue(datePart, delta) {
        if (!this.dateValue || !DateTimeUtil.isValidDate(this.dateValue)) {
            return null;
        }
        const newDate = new Date(this.dateValue.getTime());
        switch (datePart) {
            case DatePart.Date:
                DateTimeUtil.spinDate(delta, newDate, this.spinLoop);
                break;
            case DatePart.Month:
                DateTimeUtil.spinMonth(delta, newDate, this.spinLoop);
                break;
            case DatePart.Year:
                DateTimeUtil.spinYear(delta, newDate);
                break;
            case DatePart.Hours:
                DateTimeUtil.spinHours(delta, newDate, this.spinLoop);
                break;
            case DatePart.Minutes:
                DateTimeUtil.spinMinutes(delta, newDate, this.spinLoop);
                break;
            case DatePart.Seconds:
                DateTimeUtil.spinSeconds(delta, newDate, this.spinLoop);
                break;
            case DatePart.AmPm:
                const formatPart = this._inputDateParts.find(dp => dp.type === DatePart.AmPm);
                const amPmFromMask = this.inputValue.substring(formatPart.start, formatPart.end);
                return DateTimeUtil.spinAmPm(newDate, this.dateValue, amPmFromMask);
        }
        return newDate;
    }
    trySpinValue(datePart, delta, negative = false) {
        if (!delta) {
            // default to 1 if a delta is set to 0 or any other falsy value
            delta = this.datePartDeltas[datePart] || 1;
        }
        const spinValue = negative ? -Math.abs(delta) : Math.abs(delta);
        return this.spinValue(datePart, spinValue) || new Date();
    }
    setDateValue(value) {
        this._dateValue = DateTimeUtil.isValidDate(value)
            ? value
            : DateTimeUtil.parseIsoDate(value);
    }
    updateValue(newDate) {
        this._oldValue = this.dateValue;
        this.value = newDate;
        // TODO: should we emit events here?
        if (this.inputIsComplete() || this.inputValue === this.emptyMask) {
            this.valueChange.emit(this.dateValue);
        }
        if (this.dateValue && !this.valueInRange(this.dateValue)) {
            this.validationFailed.emit({ oldValue: this._oldValue, newValue: this.dateValue, userInput: this.inputValue });
        }
    }
    toTwelveHourFormat(value) {
        let hour = parseInt(value.replace(new RegExp(this.promptChar, 'g'), '0'), 10);
        if (hour > 12) {
            hour -= 12;
        }
        else if (hour === 0) {
            hour = 12;
        }
        return hour;
    }
    getPartValue(datePartInfo, partLength) {
        let maskedValue;
        const datePart = datePartInfo.type;
        switch (datePart) {
            case DatePart.Date:
                maskedValue = this.dateValue.getDate();
                break;
            case DatePart.Month:
                // months are zero based
                maskedValue = this.dateValue.getMonth() + 1;
                break;
            case DatePart.Year:
                if (partLength === 2) {
                    maskedValue = this.prependValue(parseInt(this.dateValue.getFullYear().toString().slice(-2), 10), partLength, '0');
                }
                else {
                    maskedValue = this.dateValue.getFullYear();
                }
                break;
            case DatePart.Hours:
                if (datePartInfo.format.indexOf('h') !== -1) {
                    maskedValue = this.prependValue(this.toTwelveHourFormat(this.dateValue.getHours().toString()), partLength, '0');
                }
                else {
                    maskedValue = this.dateValue.getHours();
                }
                break;
            case DatePart.Minutes:
                maskedValue = this.dateValue.getMinutes();
                break;
            case DatePart.Seconds:
                maskedValue = this.dateValue.getSeconds();
                break;
            case DatePart.AmPm:
                maskedValue = this.dateValue.getHours() >= 12 ? 'PM' : 'AM';
                break;
        }
        if (datePartInfo.type !== DatePart.AmPm) {
            return this.prependValue(maskedValue, partLength, '0');
        }
        return maskedValue;
    }
    prependValue(value, partLength, prependChar) {
        return (prependChar + value.toString()).slice(-partLength);
    }
    spin(event) {
        event.preventDefault();
        switch (event.key) {
            case this.platform.KEYMAP.ARROW_UP:
                this.increment();
                break;
            case this.platform.KEYMAP.ARROW_DOWN:
                this.decrement();
                break;
        }
    }
    inputIsComplete() {
        return this.inputValue.indexOf(this.promptChar) === -1;
    }
    moveCursor(event) {
        const value = event.target.value;
        switch (event.key) {
            case this.platform.KEYMAP.ARROW_LEFT:
                if (event.ctrlKey) {
                    event.preventDefault();
                    this.setSelectionRange(this.getNewPosition(value));
                }
                break;
            case this.platform.KEYMAP.ARROW_RIGHT:
                if (event.ctrlKey) {
                    event.preventDefault();
                    this.setSelectionRange(this.getNewPosition(value, 1));
                }
                break;
        }
    }
    /**
     * Move the cursor in a specific direction until it reaches a date/time separator.
     * Then return its index.
     *
     * @param value The string it operates on.
     * @param direction 0 is left, 1 is right. Default is 0.
     */
    getNewPosition(value, direction = 0) {
        const literals = this._inputDateParts.filter(p => p.type === DatePart.Literal);
        let cursorPos = this.selectionStart;
        if (!direction) {
            do {
                cursorPos = cursorPos > 0 ? --cursorPos : cursorPos;
            } while (!literals.some(l => l.end === cursorPos) && cursorPos > 0);
            return cursorPos;
        }
        else {
            do {
                cursorPos++;
            } while (!literals.some(l => l.start === cursorPos) && cursorPos < value.length);
            return cursorPos;
        }
    }
}
IgxDateTimeEditorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IgxDateTimeEditorDirective, deps: [{ token: i0.Renderer2 }, { token: i0.ElementRef }, { token: i1.MaskParsingService }, { token: i2.PlatformUtil }, { token: DOCUMENT }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Directive });
IgxDateTimeEditorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.2", type: IgxDateTimeEditorDirective, selector: "[igxDateTimeEditor]", inputs: { locale: "locale", minValue: "minValue", maxValue: "maxValue", spinLoop: "spinLoop", displayFormat: "displayFormat", inputFormat: ["igxDateTimeEditor", "inputFormat"], value: "value", spinDelta: "spinDelta" }, outputs: { valueChange: "valueChange", validationFailed: "validationFailed" }, host: { listeners: { "wheel": "onWheel($event)" } }, providers: [
        { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateTimeEditorDirective, multi: true },
        { provide: NG_VALIDATORS, useExisting: IgxDateTimeEditorDirective, multi: true }
    ], exportAs: ["igxDateTimeEditor"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IgxDateTimeEditorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxDateTimeEditor]',
                    exportAs: 'igxDateTimeEditor',
                    providers: [
                        { provide: NG_VALUE_ACCESSOR, useExisting: IgxDateTimeEditorDirective, multi: true },
                        { provide: NG_VALIDATORS, useExisting: IgxDateTimeEditorDirective, multi: true }
                    ]
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ElementRef }, { type: i1.MaskParsingService }, { type: i2.PlatformUtil }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { locale: [{
                type: Input
            }], minValue: [{
                type: Input
            }], maxValue: [{
                type: Input
            }], spinLoop: [{
                type: Input
            }], displayFormat: [{
                type: Input
            }], inputFormat: [{
                type: Input,
                args: [`igxDateTimeEditor`]
            }], value: [{
                type: Input
            }], spinDelta: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], validationFailed: [{
                type: Output
            }], onWheel: [{
                type: HostListener,
                args: ['wheel', ['$event']]
            }] } });
export class IgxDateTimeEditorModule {
}
IgxDateTimeEditorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IgxDateTimeEditorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
IgxDateTimeEditorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IgxDateTimeEditorModule, declarations: [IgxDateTimeEditorDirective], exports: [IgxDateTimeEditorDirective] });
IgxDateTimeEditorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IgxDateTimeEditorModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: IgxDateTimeEditorModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [IgxDateTimeEditorDirective],
                    exports: [IgxDateTimeEditorDirective]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,
import { DEFAULT_PIVOT_KEYS, PivotDimensionType } from '../grids/pivot-grid/pivot-grid.interface';
import { PivotUtil } from '../grids/pivot-grid/pivot-util';
import { FilteringStrategy } from './filtering-strategy';
import { cloneArray } from '../core/utils';
export class NoopPivotDimensionsStrategy {
    static instance() {
        return this._instance || (this._instance = new NoopPivotDimensionsStrategy());
    }
    process(collection, _, __) {
        return collection;
    }
}
NoopPivotDimensionsStrategy._instance = null;
export class PivotRowDimensionsStrategy {
    static instance() {
        return this._instance || (this._instance = new PivotRowDimensionsStrategy());
    }
    process(collection, rows, values, pivotKeys = DEFAULT_PIVOT_KEYS) {
        let hierarchies;
        let data;
        const prevRowDims = [];
        let prevDim;
        let prevDimTopRecords = [];
        const currRows = cloneArray(rows, true);
        PivotUtil.assignLevels(currRows);
        if (currRows.length === 0) {
            hierarchies = PivotUtil.getFieldsHierarchy(collection, [{ memberName: '', enabled: true }], PivotDimensionType.Row, pivotKeys);
            // generate flat data from the hierarchies
            data = PivotUtil.processHierarchy(hierarchies, pivotKeys, 0, true);
            return data;
        }
        for (const row of currRows) {
            if (!data) {
                // build hierarchies - groups and subgroups
                hierarchies = PivotUtil.getFieldsHierarchy(collection, [row], PivotDimensionType.Row, pivotKeys);
                // generate flat data from the hierarchies
                data = PivotUtil.processHierarchy(hierarchies, pivotKeys, 0, true);
                prevRowDims.push(row);
                prevDim = row;
                prevDimTopRecords = data;
            }
            else {
                PivotUtil.processGroups(data, row, pivotKeys);
            }
        }
        return data;
    }
}
PivotRowDimensionsStrategy._instance = null;
export class PivotColumnDimensionsStrategy {
    static instance() {
        return this._instance || (this._instance = new PivotColumnDimensionsStrategy());
    }
    process(collection, columns, values, pivotKeys = DEFAULT_PIVOT_KEYS) {
        const res = this.processHierarchy(collection, columns, values, pivotKeys);
        return res;
    }
    processHierarchy(collection, columns, values, pivotKeys) {
        const result = [];
        collection.forEach(rec => {
            // apply aggregations based on the created groups and generate column fields based on the hierarchies
            this.groupColumns(rec, columns, values, pivotKeys);
            result.push(rec);
        });
        return result;
    }
    groupColumns(rec, columns, values, pivotKeys) {
        const children = rec.children;
        if (children && children.size > 0) {
            children.forEach((childRecs, key) => {
                if (childRecs) {
                    childRecs.forEach(child => {
                        this.groupColumns(child, columns, values, pivotKeys);
                    });
                }
            });
        }
        this.applyAggregates(rec, columns, values, pivotKeys);
    }
    applyAggregates(rec, columns, values, pivotKeys) {
        const leafRecords = this.getLeafs(rec.records, pivotKeys);
        const hierarchy = PivotUtil.getFieldsHierarchy(leafRecords, columns, PivotDimensionType.Column, pivotKeys);
        PivotUtil.applyAggregations(rec, hierarchy, values, pivotKeys);
    }
    getLeafs(records, pivotKeys) {
        let leafs = [];
        for (const rec of records) {
            if (rec[pivotKeys.records]) {
                leafs = leafs.concat(this.getLeafs(rec[pivotKeys.records], pivotKeys));
            }
            else {
                leafs.push(rec);
            }
        }
        return leafs;
    }
}
PivotColumnDimensionsStrategy._instance = null;
export class DimensionValuesFilteringStrategy extends FilteringStrategy {
    /**
     * Creates a new instance of FormattedValuesFilteringStrategy.
     *
     * @param fields An array of column field names that should be formatted.
     * If omitted the values of all columns which has formatter will be formatted.
     */
    constructor(fields) {
        super();
        this.fields = fields;
    }
    getFieldValue(rec, fieldName, isDate = false, isTime = false, grid) {
        const allDimensions = grid.allDimensions;
        const enabledDimensions = allDimensions.filter(x => x && x.enabled);
        const dim = PivotUtil.flatten(enabledDimensions).find(x => x.memberName === fieldName);
        const value = dim.childLevel ? this._getDimensionValueHierarchy(dim, rec).map(x => `[` + x + `]`).join('.') : PivotUtil.extractValueFromDimension(dim, rec);
        return value;
    }
    getFilterItems(column, tree) {
        const grid = column.grid;
        const enabledDimensions = grid.allDimensions.filter(x => x && x.enabled);
        let data = column.grid.gridAPI.filterDataByExpressions(tree);
        const dim = enabledDimensions.find(x => x.memberName === column.field);
        const allValuesHierarchy = PivotUtil.getFieldsHierarchy(data, [dim], PivotDimensionType.Column, grid.pivotKeys);
        const isNoop = grid.pivotConfiguration.columnStrategy instanceof NoopPivotDimensionsStrategy || grid.pivotConfiguration.rowStrategy instanceof NoopPivotDimensionsStrategy;
        const items = !isNoop ? this._getFilterItems(allValuesHierarchy, grid.pivotKeys) : [{ value: '' }];
        return Promise.resolve(items);
    }
    _getFilterItems(hierarchy, pivotKeys) {
        const items = [];
        hierarchy.forEach((value) => {
            const val = value.value;
            const path = val.split(pivotKeys.columnDimensionSeparator);
            const hierarchicalValue = path.length > 1 ? path.map(x => `[` + x + `]`).join('.') : val;
            const text = path[path.length - 1];
            items.push({
                value: hierarchicalValue,
                label: text,
                children: this._getFilterItems(value.children, pivotKeys)
            });
        });
        return items;
    }
    _getDimensionValueHierarchy(dim, rec) {
        let path = [];
        let value = PivotUtil.extractValueFromDimension(dim, rec);
        path.push(value);
        if (dim.childLevel) {
            const childVals = this._getDimensionValueHierarchy(dim.childLevel, rec);
            path = path.concat(childVals);
        }
        return path;
    }
}
//# sourceMappingURL=data:application/json;base64,